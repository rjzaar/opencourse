{#
// echo "<xmp>"; print_r(array_keys($content));
#}{#// die(_FILE_);
#}{#// [0] => links
#}    {#// [1] => field_author_s_
#}    {#// [2] => comments
#}    {#// [3] => field_basic_image_image
#}    {#// [4] => field_licence
#}    {#// [5] => field_link
#}    {#// [6] => body
#}    {#// [7] => field_year
#}
{#/**
 * @file
 * Bartik's theme implementation to display a node.
 *
 * Available variables:
 * - $title: the (sanitized) title of the node.
 * - $content: An array of node items. Use render($content) to print them all,
 *   or print a subset such as render($content['field_example']). Use
 *   hide($content['field_example']) to temporarily suppress the printing of a
 *   given element.
 * - $user_picture: The node author's picture from user-picture.tpl.php.
 * - $date: Formatted creation date. Preprocess functions can reformat it by
 *   calling format_date() with the desired parameters on the $created variable.
 * - $name: Themed username of node author output from theme_username().
 * - $node_url: Direct URL of the current node.
 * - $display_submitted: Whether submission information should be displayed.
 * - $submitted: Submission information created from $name and $date during
 *   template_preprocess_node().
 * - $classes: String of classes that can be used to style contextually through
 *   CSS. It can be manipulated through the variable $classes_array from
 *   preprocess functions. The default values can be one or more of the
 *   following:
 *   - node: The current template type; for example, "theming hook".
 *   - node-[type]: The current node type. For example, if the node is a
 *     "Blog entry" it would result in "node-blog". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node-teaser: Nodes in teaser form.
 *   - node-preview: Nodes in preview mode.
 *   The following are controlled through the node publishing options.
 *   - node-promoted: Nodes promoted to the front page.
 *   - node-sticky: Nodes ordered above other non-sticky nodes in teaser
 *     listings.
 *   - node-unpublished: Unpublished nodes visible only to administrators.
 * - $title_prefix (array): An array containing additional output populated by
 *   modules, intended to be displayed in front of the main title tag that
 *   appears in the template.
 * - $title_suffix (array): An array containing additional output populated by
 *   modules, intended to be displayed after the main title tag that appears in
 *   the template.
 *
 * Other variables:
 * - $node: Full node object. Contains data that may not be safe.
 * - $type: Node type; for example, story, page, blog, etc.
 * - $comment_count: Number of comments attached to the node.
 * - $uid: User ID of the node author.
 * - $created: Time the node was published formatted in Unix timestamp.
 * - $classes_array: Array of html class attribute values. It is flattened
 *   into a string within the variable $classes.
 * - $zebra: Outputs either "even" or "odd". Useful for zebra striping in
 *   teaser listings.
 * - $id: Position of the node. Increments each time it's output.
 *
 * Node status variables:
 * - $view_mode: View mode; for example, "full", "teaser".
 * - $teaser: Flag for the teaser state (shortcut for $view_mode == 'teaser').
 * - $page: Flag for the full page state.
 * - $promote: Flag for front page promotion state.
 * - $sticky: Flags for sticky post setting.
 * - $status: Flag for published status.
 * - $comment: State of comment settings for the node.
 * - $readmore: Flags true if the teaser content of the node cannot hold the
 *   main body content.
 * - $is_front: Flags true when presented in the front page.
 * - $logged_in: Flags true when the current user is a logged-in member.
 * - $is_admin: Flags true when the current user is an administrator.
 *
 * Field variables: for each field instance attached to the node a corresponding
 * variable is defined; for example, $node->body becomes $body. When needing to
 * access a field's raw values, developers/themers are strongly encouraged to
 * use these variables. Otherwise they will have to explicitly specify the
 * desired field language; for example, $node->body['en'], thus overriding any
 * language negotiation rule that was previously applied.
 *
 * @see template_preprocess()
 * @see template_preprocess_node()
 * @see template_process()
 */#}

{% if page  %}

    <div id="node-{{ node.id }}">

        <div class="content oc_inject clearfix"{{ content_attributes }}>

            <div class="oc_right50" >
                {{ content.field_oc_image }}
            </div>

            <div class="oc_col_width">
                {{ content.body }}
            </div>

        </div>


        <div class="content oc_inject clearfix"{{ content_attributes }}>
            <h2 class=" oc_title">
                {{ "METADATA" }}
            </h2>
            <div class="oc_floatleft">
                 Posted: {{ author_name }}: {{ created }} </br>
                Modified: {{ modified }}

            </div>
            <div class="oc_floatleft">
                {{ content.field_oc_topic }}
            </div>
            <div class="oc_floatleft">
                {{ content.field_oc_level }}
            </div>

        </div>
        <div>
            <h2 class="oc_inject oc_title">
                BIBLIOGRAPHIC REFERENCE </br>

            </h2>
            <p class="oc_inject oc_text ">

    <span class="oc_book_title">
      {{ node.label }}
    </span>
               by {{ auth }} available at <a href="{{ link_url }}">{{ link_title}}</a> under a <a href="{{ link_lic_url }}">{{ link_lic_title}}</a> licence.
            </p>
        </div>

        <div class="content oc_comment clearfix"{{ content_attributes }}>
            {{ content.comments }}
        </div>
    </div>

{% else %}
    <!-- This is for teasers, ie a non page render -->
    <div id="node-{{ node.id }}">

        <div class="{{ classes }}  oc_panel_left oc_title clearfix"{{ attributes }}>
            {# PHP: print "<a class=\" oc_panel_left\" href=\"".$node_url."\">".render($title)."</a>"; #}
            {% if is_admin  %}
                {# //needs to be fixed: print "<a href=\"/admin/content/book/".$nid."?destination=admin/content/book\">(Sort)</a>"; #}
            {% endif %}
            {% if body  %}
                <div class="oc_summary">
                    <div class=" oc_teaser_text oc_panel_left field-item clearfix"{{ content_attributes }}>
                        {{ body }} {#//['und'][0]['value'];
#}
                    </div>
                </div>
            {% endif %}

        </div>
    </div>
{% endif %}
