{#
//echo "<xmp>"; print_r(array_keys($content));
#}{#//die(_FILE_);
#}{#/**
 * @file
 * Bartik's theme implementation to display a node.
 *
 * Available variables:
 * - $title: the (sanitized) title of the node.
 * - $content: An array of node items. Use render($content) to print them all,
 *   or print a subset such as render($content['field_example']). Use
 *   hide($content['field_example']) to temporarily suppress the printing of a
 *   given element.
 * - $user_picture: The node author's picture from user-picture.tpl.php.
 * - $date: Formatted creation date. Preprocess functions can reformat it by
 *   calling format_date() with the desired parameters on the $created variable.
 * - $name: Themed username of node author output from theme_username().
 * - $node_url: Direct url of the current node.
 * - $display_submitted: Whether submission information should be displayed.
 * - $submitted: Submission information created from $name and $date during
 *   template_preprocess_node().
 * - $classes: String of classes that can be used to style contextually through
 *   CSS. It can be manipulated through the variable $classes_array from
 *   preprocess functions. The default values can be one or more of the
 *   following:
 *   - node: The current template type, i.e., "theming hook".
 *   - node-[type]: The current node type. For example, if the node is a
 *     "Blog entry" it would result in "node-blog". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node-teaser: Nodes in teaser form.
 *   - node-preview: Nodes in preview mode.
 *   The following are controlled through the node publishing options.
 *   - node-promoted: Nodes promoted to the front page.
 *   - node-sticky: Nodes ordered above other non-sticky nodes in teaser
 *     listings.
 *   - node-unpublished: Unpublished nodes visible only to administrators.
 * - $title_prefix (array): An array containing additional output populated by
 *   modules, intended to be displayed in front of the main title tag that
 *   appears in the template.
 * - $title_suffix (array): An array containing additional output populated by
 *   modules, intended to be displayed after the main title tag that appears in
 *   the template.
 *
 * Other variables:
 * - $node: Full node object. Contains data that may not be safe.
 * - $type: Node type, i.e. story, page, blog, etc.
 * - $comment_count: Number of comments attached to the node.
 * - $uid: User ID of the node author.
 * - $created: Time the node was published formatted in Unix timestamp.
 * - $classes_array: Array of html class attribute values. It is flattened
 *   into a string within the variable $classes.
 * - $zebra: Outputs either "even" or "odd". Useful for zebra striping in
 *   teaser listings.
 * - $id: Position of the node. Increments each time it's output.
 *
 * Node status variables:
 * - $view_mode: View mode, e.g. 'full', 'teaser'...
 * - $teaser: Flag for the teaser state (shortcut for $view_mode == 'teaser').
 * - $page: Flag for the full page state.
 * - $promote: Flag for front page promotion state.
 * - $sticky: Flags for sticky post setting.
 * - $status: Flag for published status.
 * - $comment: State of comment settings for the node.
 * - $readmore: Flags true if the teaser content of the node cannot hold the
 *   main body content.
 * - $is_front: Flags true when presented in the front page.
 * - $logged_in: Flags true when the current user is a logged-in member.
 * - $is_admin: Flags true when the current user is an administrator.
 *
 * Field variables: for each field instance attached to the node a corresponding
 * variable is defined, e.g. $node->body becomes $body. When needing to access
 * a field's raw values, developers/themers are strongly encouraged to use these
 * variables. Otherwise they will have to explicitly specify the desired field
 * language, e.g. $node->body['en'], thus overriding any language negotiation
 * rule that was previously applied.
 *
 * @see template_preprocess()
 * @see template_preprocess_node()
 * @see template_process()
 */#}
{#//print file_create_url($field_basic_image_image[0]['uri']);
#}
{#
//Get the correct cropped image URL which is set in the formation image edit
#}{#//for that image style. This is not accessible from the variables, but is generated
#}{#//when the node is rendered and so can be found through a string search (below)
#}{#// Then use this image for the background image.
#}
{# PHP:$pagecontent = render($content);#}

{# PHP:$srcstart = stripos($pagecontent,"src=\"");#}
{# PHP:$srcend = stripos ($pagecontent,"\"",$srcstart+10);#}
{# PHP:$srcstr = substr($pagecontent,$srcstart+5,$srcend-$srcstart-5);
#}

<div id="node-{{ node.id }}"
     style= "background-color: #{{ oc_image_back_color }}; background-image: url('{{ field_oc_image|field_target_entity.uri.value | image_style('de2e') }}' )"
     {#style= "background-color: #{{ field_oc_background_color[0]['value'] }}; background-image: url('{{ field_oc_image|field_target_entity.tid.value }}' )"#}

         class="{{ classes }} oc_1 clearfix" {{ attributes }} role="article">
    <div class="oc_accordian_container">

        <div id="Doc_{{ node.id }}" class="oc_accordion_content">
            <div class="content oc_container"{{ content_attributes }}>

                <div class="oc_image_featured_box">

<a href="{{ drupal_url('node/', {absolute: true}) }}/{{ node.id }}">{{ content['title'][0]['#context']['value'] }}</a>
                    by  <a href="{{ drupal_url('taxonomy/term/', {absolute: true}) }}{{ field_oc_author_s_|field_target_entity.tid.value}}">{{ field_oc_author_s_|field_target_entity.name.value}}</a>
                    <p>{{ body }}</p>
                </div>
            </div>
        </div>


    </div>

</div>
<button onclick="MAYOAccordian('Doc_{{ node.id }}')"
        class="oc_btn_block ">Image Information +</button>
<script>
    function MAYOAccordian(id) {
        var x = document.getElementById(id);
        if (x.className.indexOf("oc_show") == -1) {
            x.className += " oc_show";
        } else {
            x.className = x.className.replace(" oc_show", "");
        }
    }
</script>
